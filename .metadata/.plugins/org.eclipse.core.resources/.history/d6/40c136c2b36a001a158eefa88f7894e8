/**
 * generated by Xtext 2.20.0
 */
package dk.klevang.generator;

import com.google.common.collect.Iterators;
import dk.klevang.mathInterpreter.Div;
import dk.klevang.mathInterpreter.Exp;
import dk.klevang.mathInterpreter.MathExp;
import dk.klevang.mathInterpreter.Minus;
import dk.klevang.mathInterpreter.Mult;
import dk.klevang.mathInterpreter.Plus;
import javax.swing.JOptionPane;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MathInterpreterGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final MathExp math = Iterators.<MathExp>filter(resource.getAllContents(), MathExp.class).next();
    final int result = this.compute(math);
    CharSequence _display = this.display(math);
    String _plus = ("Math expression = " + _display);
    System.out.println(_plus);
    JOptionPane.showMessageDialog(null, ("result = " + Integer.valueOf(result)), "Math Language", JOptionPane.INFORMATION_MESSAGE);
  }
  
  public int compute(final MathExp math) {
    return this.computeExp(math.getExp());
  }
  
  public int computeExp(final Exp exp) {
    int _xblockexpression = (int) 0;
    {
      final int right = this.computeNumber(exp.getRight());
      System.out.print("Exp: ");
      System.out.println(exp);
      int _switchResult = (int) 0;
      boolean _matched = false;
      if (exp instanceof Plus) {
        _matched=true;
        int _computeExp = this.computeExp(((Plus)exp).getLeft());
        _switchResult = (_computeExp + right);
      }
      if (!_matched) {
        if (exp instanceof Minus) {
          _matched=true;
          int _computeExp = this.computeExp(((Minus)exp).getLeft());
          _switchResult = (_computeExp - right);
        }
      }
      if (!_matched) {
        if (exp instanceof Mult) {
          _matched=true;
          int _computeExp = this.computeExp(((Mult)exp).getLeft());
          _switchResult = (_computeExp * right);
        }
      }
      if (!_matched) {
        if (exp instanceof Div) {
          _matched=true;
          int _computeExp = this.computeExp(((Div)exp).getLeft());
          _switchResult = (_computeExp / right);
        }
      }
      if (!_matched) {
        _switchResult = this.computeNumber(exp);
      }
      _xblockexpression = _switchResult;
    }
    return _xblockexpression;
  }
  
  public int computeNumber(final Exp exp) {
    if ((exp != null)) {
      System.out.print("Number: ");
      System.out.println(exp);
      return exp.getValue();
    }
    return (-1000);
  }
  
  public CharSequence display(final MathExp math) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Math[");
    CharSequence _displayExp = this.displayExp(math.getExp());
    _builder.append(_displayExp);
    _builder.append("]");
    return _builder;
  }
  
  public CharSequence displayExp(final Exp exp) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Exp[");
    Exp _left = exp.getLeft();
    CharSequence _displayExp = null;
    if (_left!=null) {
      _displayExp=this.displayExp(_left);
    }
    _builder.append(_displayExp);
    _builder.append(",");
    String _displayOp = null;
    if (exp!=null) {
      _displayOp=this.displayOp(exp);
    }
    _builder.append(_displayOp);
    _builder.append(",");
    int _displayPrim = 0;
    if (exp!=null) {
      _displayPrim=this.displayPrim(exp, exp.getRight());
    }
    _builder.append(_displayPrim);
    _builder.append("]");
    return _builder;
  }
  
  public CharSequence displayFactor(final Exp primary) {
    return "?";
  }
  
  public int displayPrim(final Exp parent, final Exp child) {
    int _xifexpression = (int) 0;
    if ((child == null)) {
      _xifexpression = parent.getValue();
    } else {
      _xifexpression = child.getValue();
    }
    return _xifexpression;
  }
  
  public String displayOp(final Exp exp) {
    String _switchResult = null;
    boolean _matched = false;
    if (exp instanceof Plus) {
      _matched=true;
      _switchResult = "+";
    }
    if (!_matched) {
      if (exp instanceof Minus) {
        _matched=true;
        _switchResult = "-";
      }
    }
    if (!_matched) {
      if (exp instanceof Mult) {
        _matched=true;
        _switchResult = "*";
      }
    }
    if (!_matched) {
      if (exp instanceof Div) {
        _matched=true;
        _switchResult = "/";
      }
    }
    return _switchResult;
  }
}
